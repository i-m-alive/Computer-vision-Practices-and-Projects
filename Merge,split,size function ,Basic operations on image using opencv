{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "19b62012-5077-4662-8cdc-ff63a6a8a32e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "da5f7cf6-b2b9-4159-a566-cb78f1d307fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Read an image---\n",
    "img=cv2.imread(\"D:\\Babe\\IMG_20231024_190545.jpg\")\n",
    "img = cv2.resize(img,(500,700))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "841848cb-4eac-4573-97b8-9f70b6bc75c4",
   "metadata": {},
   "source": [
    "cv2.imshow(\"res\",img)\n",
    "cv2.waitKey(0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4e9611d3-198f-413e-8895-4a22d87c4690",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of the given image is (700, 500, 3)\n"
     ]
    }
   ],
   "source": [
    "#to print the shape of the image we have shape\n",
    "print(\"Shape of the given image is\",img.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "17660f4c-109f-4bd4-a8fc-719a16d3b496",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of the image is : 1050000\n"
     ]
    }
   ],
   "source": [
    "#to print the size of the image we have size fucntion\n",
    "print(\"Size of the image is :\",img.size)\n",
    "#or say no. of pixels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9361de88-6c69-43e3-a7b3-4ad7d5fb0eb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type of the image: <class 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "# to check the data type of the image we have type()\n",
    "## type() function take 1 paramerter that is img\n",
    "print(\"Type of the image:\",type(img))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ac6ac74-d73e-44e8-8b08-6216371cd9ec",
   "metadata": {},
   "source": [
    "it means the image data is stored in the form of array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19f26630-b511-4d08-b168-6b384df5a1e9",
   "metadata": {},
   "source": [
    "## Split()\n",
    "Split() is used to split the image into its BGR channels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "10f4b568-56b9-424d-836e-4c06d098d32e",
   "metadata": {},
   "outputs": [],
   "source": [
    "b,g,r=cv2.split(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "881222ea-432c-47b6-a112-b47a4234ec9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([[ 71,  67,  66, ..., 252, 252, 250],\n",
      "       [ 71,  64,  67, ..., 253, 252, 252],\n",
      "       [ 71,  68,  67, ..., 254, 254, 252],\n",
      "       ...,\n",
      "       [ 21,  23,  27, ...,  80,  76,  79],\n",
      "       [  9,   9,  12, ...,  80,  79,  80],\n",
      "       [  0,   0,   0, ...,  79,  76,  79]], dtype=uint8), array([[106, 104, 103, ..., 254, 254, 253],\n",
      "       [106, 101, 105, ..., 254, 254, 254],\n",
      "       [108, 105, 104, ..., 254, 254, 253],\n",
      "       ...,\n",
      "       [ 34,  36,  40, ..., 127, 124, 126],\n",
      "       [ 18,  18,  21, ..., 124, 124, 125],\n",
      "       [  6,   7,   9, ..., 123, 121, 124]], dtype=uint8), array([[156, 154, 153, ..., 255, 255, 255],\n",
      "       [156, 151, 155, ..., 255, 255, 255],\n",
      "       [158, 155, 154, ..., 254, 254, 255],\n",
      "       ...,\n",
      "       [ 48,  50,  56, ..., 178, 174, 177],\n",
      "       [ 31,  31,  35, ..., 177, 175, 176],\n",
      "       [ 17,  17,  19, ..., 176, 172, 175]], dtype=uint8))\n"
     ]
    }
   ],
   "source": [
    "print(cv2.split(img))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7cbf7d15-4e8f-4a29-8c37-ff52f03aed7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv2.imshow(\"blue\",b)\n",
    "cv2.waitKey(0)\n",
    "cv2.imshow(\"green\",g)\n",
    "cv2.waitKey(0)\n",
    "cv2.imshow(\"red\",r)\n",
    "cv2.waitKey(0)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f39d11a4-ac3f-417a-bfee-508391ed5127",
   "metadata": {},
   "source": [
    "## merge()\n",
    "It is used to merge the channels into one channel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "07076d0d-1674-4729-9e8e-109eb04a00f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "m=cv2.merge((b,g,r))\n",
    "cv2.imshow(\"res\",m)\n",
    "cv2.waitKey(0)\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e7132faf-dc6b-463c-a098-977113d605e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the pixel of that co-ordinates== [ 78  94 101]\n"
     ]
    }
   ],
   "source": [
    "#access a pixel value by its row and column coordinates.\n",
    "px = img[520,300] #store cordinate in variable\n",
    "print(\"the pixel of that co-ordinates==\",px) #we get the pixel value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c7d5984d-6ca9-4504-8911-16d172d71434",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the pixel having blue color== 15\n",
      "the pixel having grn color== 17\n",
      "the pixel having red color== 25\n"
     ]
    }
   ],
   "source": [
    "#Now try to find selected channel value from cordinate\n",
    "#We know we have three channel -   0,1,2\n",
    "# accessing only blue pixel\n",
    "blue = img[520,255,0]\n",
    "print(\"the pixel having blue color==\",blue)\n",
    "\n",
    "grn = img[520,255,1] #for green pass 1\n",
    "print(\"the pixel having grn color==\",grn)\n",
    "red = img[520,255,2] #for red pass 2\n",
    "print(\"the pixel having red color==\",red)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a230dda-b322-429b-8fc5-23fedae36b89",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
